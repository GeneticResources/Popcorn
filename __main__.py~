from __future__ import division
from __future__ import print_function
from mytool import fit
import numpy as np
import pandas as pd
import time
import sys
import argparse
import logging
import traceback
from IPython import embed

def main(args):
    # Arguments common to compute and fit modes
    parser = argparse.ArgumentParser()
    parser.add_argument('-v',help='Specify output verbosity',type=int,
                        choices=[0,1,2,3])
    parser.add_argument('--out',help='Specify output file',default='my_tool')
    subparsers = parser.add_subparsers(help='Program mode: "compute" for '
                                       'computing covariance scores, "fit" for '
                                       'fitting summary statistics with already'
                                       ' computed covariance scores.',
                                       dest='mode')
    # Arguments exclusive to compute mode
    parser_compute = subparsers.add_parser('compute')
    parser_compute.add_argument('--bfile',help='Specify binary plink filename')
    # Arguments exclusive to fit mode
    parser_fit = subparsers.add_parser('fit')
    parser_fit.add_argument('--sfile',help='Specify summary statistics file')
    parser_fit.add_argument('--cfile',help='Specify covariance scores file')
    args = parser.parse_args()

    # Set up logger to print to log file and std out
    logging.basicConfig(level=logging.INFO, format='%(message)s')
    logger = logging.getLogger()
    logger.addHandler(logging.FileHandler(args.out+'.log'))
    print = logger.info

    print('Beginning analysis at {T}'.format(T=time.ctime()))
    start_time = time.time()
    try:
        if args.mode == 'fit':
            if args.sfile is None or args.cfile is None:
                raise ValueError('Must provide summary statistics and'
                                 ' covariance scores.')
            
        elif args.mode == 'compute':
            pass
    except Exception:
        ex_type, ex, tb = sys.exc_info()
        print(traceback.format_exc(ex))
        raise
    print('Analysis finished at {T}'.format(T=time.ctime()) )
    time_elapsed = round(time.time()-start_time,2)
    print('Total time elapsed: {T}'.format(T=time_elapsed))

if __name__ == '__main__':
    main(sys.argv)
